// $Id$

#ifndef GCPQL_QUERY_SCANNER_H
#define GCPQL_QUERY_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    gcpql_query::Parser::token_type				\
    gcpql_query::Scanner::lex(				\
	gcpql_query::Parser::semantic_type* yylval,		\
	gcpql_query::Parser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer gcpqlQueryFlexLexer
#include <FlexLexer.h>
#undef yyFlexLexer
#endif

#include "gcpql_query_parser.h"

namespace gcpql_query {

	class Scanner : public gcpqlQueryFlexLexer
	{
	public:
		/** Create a new scanner object. The streams arg_yyin and arg_yyout default
			* to cin and cout, but that assignment is only made when initializing in
			* yylex(). */
		Scanner(std::istream* arg_yyin = 0,
			std::ostream* arg_yyout = 0);

		/** Required for virtual functions */
		virtual ~Scanner();

		/** This is the main lexing function. It is generated by flex according to
			* the macro declaration YY_DECL above. The generated bison parser then
			* calls this virtual function to fetch new tokens. */
		virtual Parser::token_type lex(
			Parser::semantic_type* yylval,
			Parser::location_type* yylloc
		);

		/** Enable debug output (via arg_yyout) if compiled into the scanner. */
		void set_debug(bool b);
	};

}


#endif // GCPQL_QUERY_SCANNER_H
